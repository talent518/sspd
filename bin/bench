#!/opt/ssp/bin/php -q
<?php
define('IS_DEBUG', 0);

require 'core.php';

@list(,$host,$port,$nthreads,$nconns,$ntimes) = $_SERVER['argv'];

if(!$host) {
	$host = '127.0.0.1';
}
if(!$port) {
	$port = 8083;
}
if(!$ntimes) {
	$ntimes = 1000;
}

$beginTime=microtime(true);

for($i=0;$i<$nthreads;$i++) {
	$pid = pcntl_fork();
	//父进程和子进程都会执行下面代码
	if ($pid == -1) {
		//错误处理：创建子进程失败时返回-1.
		 die('could not fork');
	} else if ($pid) {
	} else {
		break;
	}
}

if($pid) {
	$_pid = posix_getpid();

	while(pcntl_wait($status) > 0) {
	}

	echo 'all run time: ',microtime(true)-$beginTime,PHP_EOL;

	exit;
}

$pid = posix_getpid();
$beginTime=microtime(true);

import('lib.xml');

$request=new XML_Element('request');
$request->type='User.Login';
$request->is_simple=true;
$request->params=array_to_xml(array('username'=>'abao','password'=>'Tz555888'),'params');

$sockets=array();
for($i=0; $i<$nconns; $i++) {
	$socket=clone LIB('socket.client');
	$socket->connect($host, $port);

	if($socket->is_connect()){
		echo '连接成功！',PHP_EOL;

		$request->pid=$pid;
		$request->i=$i;

		if($socket->write($request) === false) {
			continue;
		}
		if($socket->read() === false) {
			continue;
		}

		$sockets[$i]=$socket;
	}else{
		echo '连接失败！',PHP_EOL;
	}
}

$request=new XML_Element('request');
$request->type='Gold.State';
$request->is_simple=true;
$request->params=array_to_xml(array('page'=>1,'size'=>10,'isToday'=>0),'params');

for($i=0; $i<$ntimes; $i++) {
	$request->pid=$pid;
	$request->i=$i;
	foreach($sockets as $j=>$socket) {
		if($socket->write($request) === false) {
			unset($sockets[$j]);
			continue;
		}
		$response=$socket->read();
		if(!$response) {
			echo 'recv error!',PHP_EOL;
			unset($sockets[$j]);
			continue;
		}
	}
}

foreach($sockets as $socket) {
	$socket->close();
}

echo 'pid: ',$pid,', requests: ',$i,',run time: ',microtime(true)-$beginTime,PHP_EOL;
?>