#!/opt/ssp/bin/php -q
<?php
declare(ticks = 1);

define('IS_DEBUG', 0);
define('STD_CHARSET','utf-8');
define('TIMESTAMP', time());

/**
 * Signal handler
 */
function signalHandler($sig) {
	global $pidFile;
	
	global $connectCount,$connectErrorCount;
	static $_connectCount=0,$maxConnectCount=0,$_connectErrorCount=0,$maxConnectErrorCount=0;

	global $requestCount,$requestErrorCount;
	static $_requestCount=0,$maxRequestCount=0,$_requestErrorCount=0,$maxRequestErrorCount=0;

	switch($sig) {
		case SIGHUP:
		case SIGTERM:
		case SIGINT:
		case SIGKILL:
		case SIGSTOP:
		case SIGTSTP:
			$time = time();
			echo '=================================================================', PHP_EOL;
			echo 'connectCount: ', $connectCount/($time-TIMESTAMP), PHP_EOL;
			echo 'connectErrorCount: ', $connectErrorCount/($time-TIMESTAMP), PHP_EOL;
			echo 'requestCount: ', $requestCount/($time-TIMESTAMP), PHP_EOL;
			echo 'requestErrorCount: ', $requestErrorCount/($time-TIMESTAMP), PHP_EOL;
			@unlink($pidFile);
			exit;
		case SIGALRM:
			pcntl_alarm(1);

			echo '_________________________________________________________________', PHP_EOL;
			if($_connectCount || $_connectErrorCount) {
				$count = $connectCount-$_connectCount;
				$errorCount = $connectErrorCount-$_connectErrorCount;
				$maxConnectCount=max($maxConnectCount,$count);
				$maxConnectErrorCount=max($maxConnectErrorCount,$errorCount);

				echo '        connectCount: ', $count, PHP_EOL;
				echo '   connectErrorCount: ', $errorCount, PHP_EOL;
				echo '     maxConnectCount: ', $maxConnectCount, PHP_EOL;
				echo 'maxConnectErrorCount: ', $maxConnectErrorCount, PHP_EOL;
			}
			$_connectCount=$connectCount;
			$_connectErrorCount=$connectErrorCount;

			if($_requestCount || $_requestErrorCount) {
				$count = $requestCount-$_requestCount;
				$errorCount = $requestErrorCount-$_requestErrorCount;
				$maxRequestCount=max($maxRequestCount,$count);
				$maxRequestErrorCount=max($maxRequestErrorCount,$errorCount);

				echo '        requestCount: ', $count, PHP_EOL;
				echo '   requestErrorCount: ', $errorCount, PHP_EOL;
				echo '     maxRequestCount: ', $maxRequestCount, PHP_EOL;
				echo 'maxRequestErrorCount: ', $maxRequestErrorCount, PHP_EOL;
			}
			$_requestCount=$requestCount;
			$_requestErrorCount=$requestErrorCount;
			break;
		default:
			echo 'main signal:',$sig,PHP_EOL;
			flush();
	}
}

require 'core.php';

@list(,$host,$port,$nthreads,$nconns,$ntimes) = $_SERVER['argv'];

if(!$host) {
	$host = '127.0.0.1';
}
if(!$port) {
	$port = 8083;
}
if(!$ntimes) {
	$ntimes = 1000;
}

$beginTime=microtime(true);

$pidFile = '/tmp/'.posix_getpid().'.pipe';

if(!file_exists ($pidFile) ) {
	if(!posix_mkfifo($pidFile, 0666)) {
		error("create new pipe ($pidFile) error.");
		return false;
	}
} else {
	error( "pipe ($pidFile) has exit.");
	return false;
}

for($i=0;$i<$nthreads;$i++) {
	$pid = pcntl_fork();
	//父进程和子进程都会执行下面代码
	if ($pid == -1) {
		//错误处理：创建子进程失败时返回-1.
		 die('could not fork');
	} else if ($pid) {
	} else {
		break;
	}
}

if($pid) {
	$connectCount=$connectErrorCount=0;
	$requestCount=$requestErrorCount=0;

	pcntl_signal(SIGHUP,'signalHandler');
	pcntl_signal(SIGTERM,'signalHandler');
	pcntl_signal(SIGINT,'signalHandler');
	pcntl_signal(SIGKILL,'signalHandler');
	pcntl_signal(SIGSTOP,'signalHandler');
	pcntl_signal(SIGTSTP,'signalHandler');
	pcntl_signal(SIGALRM,'signalHandler');

	$fp = fopen($pidFile,'r');

	pcntl_alarm(1);

	while(($c=fread($fp,1))) {
		switch($c) {
			case 'Y':
				$connectCount++;
				break;
			case 'N':
				$connectErrorCount++;
				break;
			case 'y':
				$requestCount++;
				break;
			default:
				$requestErrorCount++;
				break;
		}
	}

	fclose($fp);

	echo 'all run time: ',microtime(true)-$beginTime,PHP_EOL;

	exit;
}

$beginTime=microtime(true);

import('lib.xml');

$fp = fopen($pidFile,'w');

$request=new XML_Element('request');
$request->type='User.Login';
$request->is_simple=true;
$request->params=array_to_xml(array('username'=>'abao','password'=>'Tz555888a'),'params');

$sockets=array();
for($i=0; $i<$nconns; $i++) {
	$socket=clone LIB('socket.client');
	$socket->connect($host, $port);

	if($socket->is_connect()){
		fwrite($fp,'Y');
		$request->pid=$pid;
		$request->i=$i;

		if($socket->write($request) === false) {
			continue;
		}
		if($socket->read() === false) {
			continue;
		}

		$sockets[$i]=$socket;
	}else{
		fwrite($fp,'N');
	}
}

$request=new XML_Element('request');
$request->type='Gold.List';
$request->is_simple=true;
$request->params=array_to_xml(array('page'=>1,'size'=>10,'isToday'=>0),'params');

for($i=0; $i<$ntimes; $i++) {
	$request->pid=$pid;
	$request->i=$i;
	foreach($sockets as $j=>$socket) {
		if($socket->write($request) === false) {
			fwrite($fp,'n');
			unset($sockets[$j]);
			continue;
		}
		$response=$socket->read();
		if(!$response) {
			fwrite($fp,'n');
			unset($sockets[$j]);
			continue;
		}
		fwrite($fp,'y');
	}
}

foreach($sockets as $socket) {
	$socket->close();
}

fclose($fp);

echo 'pid: ',$pid,', requests: ',$i,',run time: ',microtime(true)-$beginTime,PHP_EOL;
?>